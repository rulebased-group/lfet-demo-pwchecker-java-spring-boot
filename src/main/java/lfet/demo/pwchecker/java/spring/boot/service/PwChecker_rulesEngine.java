// *** WARNING: DO NOT MODIFY *** This is a generated Java source code!
//
// Generated by LF-ET 2.2.1 (230408a), https://www.lohrfink.de/lfet
// From decision table
// "/home/lohrfinh/lfet-demo-pwchecker-java-spring-boot/src/main/resources/lfet/pwchecker/PwChecker.lfet"
// 03.03.2023 09:01
//

// Prolog Standard ---->
// profile LFET.Java.Prolog.Standard.Interface.Dt.ini not found
// used LF-ET 2.2.1 (230408a) build in default

package lfet.demo.pwchecker.java.spring.boot.service;

import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;
import lombok.RequiredArgsConstructor;

@Generated("LF-ET")
@Component
@RequiredArgsConstructor
class PwChecker_rulesEngine
{
    final lfet.demo.pwchecker.java.spring.boot.common.DecisionTableLoggingFacade decisionTableLoggingFacade;

    <T extends lfet.demo.pwchecker.java.spring.boot.common.IDecisionTableModelTraceable> void execute(PwChecker_iFace<T> iFace, T model)
    {

        // Prolog Standard <----

        int ruleGroup = 1;
        boolean exit = false;

        while ( !exit )
        {
            exit = true;

            if ( ruleGroup == 1 ) // Prüfschritt? 1 - Prüfen: Die Passwortlänge
            {
                if ( iFace._is(PwChecker_iFace.AnzahlZeichen.$LESS8 /* < 8 */ , model) )
                {
                    // Rule R01 ---->

                    // logging beforeRule
                    decisionTableLoggingFacade.traceBeforeRule("PwChecker","20230303.090159",1,7,model);

                    iFace._do(PwChecker_iFace.AnforderungNichtErfuellt.$LENLESS8 /* Len<8 */ , model);

                    ruleGroup = 2;
                    exit = false;

                    decisionTableLoggingFacade.traceAfterRule("PwChecker","20230303.090159",1,7,model);

                    // Rule R01 <----
                }
                else if ( iFace._is(PwChecker_iFace.AnzahlZeichen.$820 /* 8 - 20 */ , model) )
                {
                    // Rule R02 ---->

                    // logging beforeRule
                    decisionTableLoggingFacade.traceBeforeRule("PwChecker","20230303.090159",2,7,model);

                    ruleGroup = 2;
                    exit = false;

                    decisionTableLoggingFacade.traceAfterRule("PwChecker","20230303.090159",2,7,model);

                    // Rule R02 <----
                }
                else // Anzahl Zeichen? > 20 - mehr als 20 Zeichen
                {
                    // Rule R03 ---->

                    // logging beforeRule
                    decisionTableLoggingFacade.traceBeforeRule("PwChecker","20230303.090159",3,7,model);

                    iFace._do(PwChecker_iFace.AnforderungNichtErfuellt.$LENGREATER20 /* Len>20 */ , model);

                    ruleGroup = 2;
                    exit = false;

                    decisionTableLoggingFacade.traceAfterRule("PwChecker","20230303.090159",3,7,model);

                    // Rule R03 <----
                }
            }
            else if ( ruleGroup == 2 ) // Prüfschritt? 2 - Prüfen: Die Anzahl verschiedener Kleinbuchstaben im Passwort
            {
                if ( iFace._is(PwChecker_iFace.AnzahlVerschiedeneKleinbuchstaben.$LESS2 /* < 2 */ , model) )
                {
                    // Rule R04 ---->

                    // logging beforeRule
                    decisionTableLoggingFacade.traceBeforeRule("PwChecker","20230303.090159",4,7,model);

                    iFace._do(PwChecker_iFace.AnforderungNichtErfuellt.$KB2, model);

                    ruleGroup = 3;
                    exit = false;

                    decisionTableLoggingFacade.traceAfterRule("PwChecker","20230303.090159",4,7,model);

                    // Rule R04 <----
                }
                else // Anzahl verschiedene Kleinbuchstaben? >= 2 - 2 oder mehr
                {
                    // Rule R05 ---->

                    // logging beforeRule
                    decisionTableLoggingFacade.traceBeforeRule("PwChecker","20230303.090159",5,7,model);

                    ruleGroup = 3;
                    exit = false;

                    decisionTableLoggingFacade.traceAfterRule("PwChecker","20230303.090159",5,7,model);

                    // Rule R05 <----
                }
            }
            else // Prüfschritt? 3 - Prüfen: Die Anzahl verschiedener Grossbuchstaben im Passwort
            {
                if ( iFace._is(PwChecker_iFace.AnzahlVerschiedeneGrossbuchstaben.$LESS2 /* < 2 */ , model) )
                {
                    // Rule R06 ---->

                    // logging beforeRule
                    decisionTableLoggingFacade.traceBeforeRule("PwChecker","20230303.090159",6,7,model);

                    iFace._do(PwChecker_iFace.AnforderungNichtErfuellt.$GB2, model);

                    exit = true;

                    decisionTableLoggingFacade.traceAfterRule("PwChecker","20230303.090159",6,7,model);

                    // Rule R06 <----
                }
                else // Anzahl verschiedene Grossbuchstaben? >= 2 - 2 oder mehr
                {
                    // Rule R07 ---->

                    // logging beforeRule
                    decisionTableLoggingFacade.traceBeforeRule("PwChecker","20230303.090159",7,7,model);

                    exit = true;

                    decisionTableLoggingFacade.traceAfterRule("PwChecker","20230303.090159",7,7,model);

                    // Rule R07 <----
                }
            }

        }

        // Epilog Standard ---->
        // profile LFET.Java.Epilog.Standard.Interface.Dt.ini not found
        // used LF-ET 2.2.1 (230408a) build in default

    }

}

// Epilog Standard <----

// End of generated Java source code
// Generated by LF-ET 2.2.1 (230408a), https://www.lohrfink.de/lfet

